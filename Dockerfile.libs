# Stage 1: Build all static libraries from source (CACHED LAYER)
FROM alpine:latest AS static-builder

ARG HIREDIS_VER=1.2.0
ARG JSONC_VER=0.17-20230812
ARG NGHTTP2_VER=1.62.1
ARG CURL_VER=8.8.0
ARG WSLAY_VER=1.1.1
ARG MUPDF_VER=1.26.9

RUN apk add \
    build-base \
    musl-dev \
    make \
    cmake \
    pkgconf \
    wget \
    ca-certificates \
    # Essential libs for MuPDF source build
    freetype-static \
    freetype-dev \
    harfbuzz-static \
    harfbuzz-dev \
    libjpeg-turbo-static \
    libjpeg-turbo-dev \
    libpng-static \
    libpng-dev \
    jbig2dec-dev \
    zlib-static \
    zlib-dev

WORKDIR /src

# Build hiredis static library with cache mount
RUN --mount=type=cache,target=/src/downloads \
    cd /src/downloads && \
    if [ ! -f v${HIREDIS_VER}.tar.gz ]; then \
        wget https://github.com/redis/hiredis/archive/refs/tags/v${HIREDIS_VER}.tar.gz; \
    fi && \
    cd /src && \
    tar -xzf /src/downloads/v${HIREDIS_VER}.tar.gz && \
    cd hiredis-${HIREDIS_VER} && \
    make static && \
    make install PREFIX=/usr/local

# Build json-c static library with cache mount
RUN --mount=type=cache,target=/src/downloads \
    cd /src/downloads && \
    if [ ! -f json-c-${JSONC_VER}.tar.gz ]; then \
        wget https://github.com/json-c/json-c/archive/refs/tags/json-c-${JSONC_VER}.tar.gz; \
    fi && \
    cd /src && \
    tar -xzf /src/downloads/json-c-${JSONC_VER}.tar.gz && \
    cd json-c-json-c-${JSONC_VER} && \
    mkdir build && cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=OFF .. && \
    make -j$(nproc) && \
    make install

# Build nghttp2 static library with cache mount
RUN --mount=type=cache,target=/src/downloads \
    cd /src/downloads && \
    if [ ! -f nghttp2-${NGHTTP2_VER}.tar.gz ]; then \
        wget https://github.com/nghttp2/nghttp2/releases/download/v${NGHTTP2_VER}/nghttp2-${NGHTTP2_VER}.tar.gz; \
    fi && \
    cd /src && \
    tar -xzf /src/downloads/nghttp2-${NGHTTP2_VER}.tar.gz && \
    cd nghttp2-${NGHTTP2_VER} && \
    ./configure --prefix=/usr/local --enable-static --disable-shared --disable-python-bindings --disable-examples --disable-app && \
    make -j$(nproc) && \
    make install

# Build curl static library with cache mount
RUN --mount=type=cache,target=/src/downloads \
    cd /src/downloads && \
    if [ ! -f curl-${CURL_VER}.tar.gz ]; then \
        wget https://curl.se/download/curl-${CURL_VER}.tar.gz; \
    fi && \
    cd /src && \
    tar -xzf /src/downloads/curl-${CURL_VER}.tar.gz && \
    cd curl-${CURL_VER} && \
    ./configure \
        --prefix=/usr/local \
        --enable-static \
        --disable-shared \
        --without-ssl \
        --disable-docs \
        --disable-manual \
        --disable-ldap \
        --disable-ldaps \
        --disable-rtsp \
        --disable-proxy \
        --disable-dict \
        --disable-telnet \
        --disable-tftp \
        --disable-pop3 \
        --disable-imap \
        --disable-smb \
        --disable-smtp \
        --disable-gopher && \
    make -j$(nproc) && \
    make install

# Build wslay static library with cache mount
RUN --mount=type=cache,target=/src/downloads \
    cd /src/downloads && \
    if [ ! -f wslay-${WSLAY_VER}.tar.gz ]; then \
        wget https://github.com/tatsuhiro-t/wslay/releases/download/release-${WSLAY_VER}/wslay-${WSLAY_VER}.tar.gz; \
    fi && \
    cd /src && \
    tar -xzf /src/downloads/wslay-${WSLAY_VER}.tar.gz && \
    cd wslay-${WSLAY_VER} && \
    ./configure \
        --prefix=/usr/local \
        --enable-static \
        --disable-shared && \
    make -j$(nproc) && \
    make install

# Build custom MuPDF from source without OpenJPEG with cache mount
RUN --mount=type=cache,target=/src/downloads \
    cd /src/downloads && \
    if [ ! -f mupdf-${MUPDF_VER}-source.tar.gz ]; then \
        wget https://mupdf.com/downloads/archive/mupdf-${MUPDF_VER}-source.tar.gz; \
    fi && \
    cd /src && \
    tar -xzf /src/downloads/mupdf-${MUPDF_VER}-source.tar.gz && \
    mv mupdf-${MUPDF_VER}-source mupdf && \
    cd mupdf && \
    # Configure MuPDF to exclude OpenJPEG completely
    echo "HAVE_LIBCRYPTO = no" > user.make && \
    echo "HAVE_CURL = no" >> user.make && \
    echo "HAVE_JAVASCRIPT = no" >> user.make && \
    echo "HAVE_X11 = no" >> user.make && \
    echo "HAVE_GLUT = no" >> user.make && \
    echo "HAVE_JBIG2 = yes" >> user.make && \
    echo "HAVE_OPENJPEG = no" >> user.make && \
    echo "FZ_ENABLE_BARCODE = 0" >> user.make && \
    # Remove OpenJPEG source files completely
    rm -f source/fitz/encode-jpx.c source/fitz/barcode.cpp && \
    # Build static MuPDF libraries with NDEBUG to disable assertions
    make generate || true && \
    make -j$(nproc) CC=gcc \
        CFLAGS="-fPIC -O2 -DNDEBUG -DTOFU_CJK_EXT=0 -Iinclude" \
        LDFLAGS="-static" \
        build=release \
        libs && \
    # Install static libraries and headers
    mkdir -p /usr/local/lib /usr/local/include && \
    cp build/release/libmupdf.a /usr/local/lib/ && \
    cp build/release/libmupdf-third.a /usr/local/lib/ && \
    cp -r include/* /usr/local/include/

FROM alpine:latest AS worker-builder

RUN apk add --no-cache \
    build-base \
    musl-dev \
    pkgconf \
    # Static libraries needed for final linking
    zlib-static \
    libjpeg-turbo-static \
    libpng-static \
    freetype-static \
    harfbuzz-static

WORKDIR /build

# Copy all static libraries from previous stage (CACHED - won't change)
COPY --from=static-builder /usr/local/lib/ /usr/local/lib/
COPY --from=static-builder /usr/local/include/ /usr/local/include/

